import { Combinator } from "./combinator";
import { HtmlElement } from "./htmlelement";
import { SelectorContext } from "./selector-context";
export declare class Pattern {
    readonly combinator: Combinator;
    readonly tagName: string;
    private readonly selector;
    private readonly pattern;
    constructor(pattern: string);
    match(node: HtmlElement, context: SelectorContext): boolean;
    private createMatcher;
}
/**
 * DOM Selector.
 */
export declare class Selector {
    private readonly pattern;
    constructor(selector: string);
    /**
     * Match this selector against a HtmlElement.
     *
     * @param root - Element to match against.
     * @returns Iterator with matched elements.
     */
    match(root: HtmlElement): IterableIterator<HtmlElement>;
    private matchInternal;
    private static parse;
    private static findCandidates;
    private static findAdjacentSibling;
    private static findGeneralSibling;
}
