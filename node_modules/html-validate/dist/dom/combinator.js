"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCombinator = exports.Combinator = void 0;
var Combinator;
(function (Combinator) {
    Combinator[Combinator["DESCENDANT"] = 1] = "DESCENDANT";
    Combinator[Combinator["CHILD"] = 2] = "CHILD";
    Combinator[Combinator["ADJACENT_SIBLING"] = 3] = "ADJACENT_SIBLING";
    Combinator[Combinator["GENERAL_SIBLING"] = 4] = "GENERAL_SIBLING";
    /* special cases */
    Combinator[Combinator["SCOPE"] = 5] = "SCOPE";
})(Combinator = exports.Combinator || (exports.Combinator = {}));
function parseCombinator(combinator, pattern) {
    /* special case, when pattern is :scope [[Selector]] will handle this
     * "combinator" to match itself instead of descendants */
    if (pattern === ":scope") {
        return Combinator.SCOPE;
    }
    switch (combinator) {
        case undefined:
        case null:
        case "":
            return Combinator.DESCENDANT;
        case ">":
            return Combinator.CHILD;
        case "+":
            return Combinator.ADJACENT_SIBLING;
        case "~":
            return Combinator.GENERAL_SIBLING;
        default:
            throw new Error(`Unknown combinator "${combinator}"`);
    }
}
exports.parseCombinator = parseCombinator;
