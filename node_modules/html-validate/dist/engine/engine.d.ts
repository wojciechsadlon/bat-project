import { ConfigData, ResolvedConfig, RuleOptions, Severity } from "../config";
import { Source } from "../context";
import { Parser } from "../parser";
import { Report, Reporter } from "../reporter";
import { Rule, RuleConstructor, RuleDocumentation } from "../rule";
export interface EventDump {
    event: string;
    data: any;
}
export interface TokenDump {
    token: string;
    data: string;
    location: string;
}
export declare class Engine<T extends Parser = Parser> {
    protected report: Reporter;
    protected configData: ConfigData;
    protected config: ResolvedConfig;
    protected ParserClass: new (config: ResolvedConfig) => T;
    protected availableRules: Record<string, RuleConstructor<any, any>>;
    constructor(config: ResolvedConfig, configData: ConfigData, ParserClass: new (config: ResolvedConfig) => T);
    /**
     * Lint sources and return report
     *
     * @param src - Parsed source.
     * @returns Report output.
     */
    lint(sources: Source[]): Report;
    /**
     * Returns a list of all events generated while parsing the source.
     *
     * For verbosity, token events are ignored (use [[dumpTokens]] to inspect
     * token stream).
     */
    dumpEvents(source: Source[]): EventDump[];
    dumpTokens(source: Source[]): TokenDump[];
    dumpTree(source: Source[]): string[];
    /**
     * Get rule documentation.
     */
    getRuleDocumentation(ruleId: string, context?: any): RuleDocumentation | null;
    /**
     * Create a new parser instance with the current configuration.
     *
     * @internal
     */
    instantiateParser(): Parser;
    private processDirective;
    private processEnableDirective;
    private processDisableDirective;
    private processDisableBlockDirective;
    private processDisableNextDirective;
    protected initPlugins(config: ResolvedConfig): {
        availableRules: {
            [key: string]: RuleConstructor<any, any>;
        };
    };
    /**
     * Initializes all rules from plugins and returns an object with a mapping
     * between rule name and its constructor.
     */
    protected initRules(config: ResolvedConfig): {
        [key: string]: RuleConstructor<any, any>;
    };
    /**
     * Setup all plugins for this session.
     */
    protected setupPlugins(source: Source, config: ResolvedConfig, parser: Parser): {
        rules: {
            [key: string]: Rule;
        };
    };
    /**
     * Load and setup all rules for current configuration.
     */
    protected setupRules(config: ResolvedConfig, parser: Parser): {
        [key: string]: Rule;
    };
    /**
     * Load and setup a rule using current config.
     */
    protected loadRule(ruleId: string, config: ResolvedConfig, severity: Severity, options: RuleOptions, parser: Parser, report: Reporter): Rule;
    protected instantiateRule(name: string, options: RuleOptions): Rule;
    protected missingRule(name: string): Rule;
    private reportError;
}
