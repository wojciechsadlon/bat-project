"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rule_1 = require("../../rule");
class H32 extends rule_1.Rule {
    documentation() {
        return {
            description: "WCAG 2.1 requires each `<form>` element to have at least one submit button.",
            url: rule_1.ruleDocumentationUrl(__filename),
        };
    }
    setup() {
        /* query all tags with form property, normally this is only the <form> tag
         * but with custom element metadata other tags might be considered form
         * (usually a component wrapping a <form> element) */
        const formTags = this.getTagsWithProperty("form");
        const formSelector = formTags.join(",");
        this.on("dom:ready", (event) => {
            const { document } = event;
            const forms = document.querySelectorAll(formSelector);
            for (const form of forms) {
                /* find nested submit buttons */
                if (hasNestedSubmit(form)) {
                    continue;
                }
                /* find explicitly associated submit buttons */
                if (hasAssociatedSubmit(document, form)) {
                    continue;
                }
                this.report(form, `<${form.tagName}> element must have a submit button`);
            }
        });
    }
}
exports.default = H32;
function isSubmit(node) {
    const type = node.getAttribute("type");
    return Boolean(type && type.valueMatches(/submit|image/));
}
function isAssociated(id, node) {
    const form = node.getAttribute("form");
    return Boolean(form && form.valueMatches(id, true));
}
function hasNestedSubmit(form) {
    const matches = form
        .querySelectorAll("button,input")
        .filter(isSubmit)
        .filter((node) => !node.hasAttribute("form"));
    return matches.length > 0;
}
function hasAssociatedSubmit(document, form) {
    const { id } = form;
    if (!id) {
        return false;
    }
    const matches = document
        .querySelectorAll("button[form],input[form]")
        .filter(isSubmit)
        .filter((node) => isAssociated(id, node));
    return matches.length > 0;
}
