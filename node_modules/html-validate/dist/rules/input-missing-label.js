"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rule_1 = require("../rule");
const a17y_1 = require("./helper/a17y");
class InputMissingLabel extends rule_1.Rule {
    documentation() {
        return {
            description: "Labels are associated with the input element and is required for a17y.",
            url: rule_1.ruleDocumentationUrl(__filename),
        };
    }
    setup() {
        this.on("dom:ready", (event) => {
            const root = event.document;
            for (const elem of root.querySelectorAll("input, textarea, select")) {
                this.validateInput(root, elem);
            }
        });
    }
    validateInput(root, elem) {
        if (a17y_1.isHTMLHidden(elem) || a17y_1.isAriaHidden(elem)) {
            return;
        }
        /* <input type="hidden"> should not have label */
        if (elem.is("input")) {
            const type = elem.getAttributeValue("type");
            if (type && type.toLowerCase() === "hidden") {
                return;
            }
        }
        let label = [];
        /* try to find label by id */
        if ((label = findLabelById(root, elem.id)).length > 0) {
            this.validateLabel(elem, label);
            return;
        }
        /* try to find parent label (input nested in label) */
        if ((label = findLabelByParent(elem)).length > 0) {
            this.validateLabel(elem, label);
            return;
        }
        this.report(elem, `<${elem.tagName}> element does not have a <label>`);
    }
    /**
     * Reports error if none of the labels are accessible.
     */
    validateLabel(elem, labels) {
        const visible = labels.filter(isVisible);
        if (visible.length === 0) {
            this.report(elem, `<${elem.tagName}> element has label but <label> element is hidden`);
        }
    }
}
exports.default = InputMissingLabel;
function isVisible(elem) {
    const hidden = a17y_1.isHTMLHidden(elem) || a17y_1.isAriaHidden(elem);
    return !hidden;
}
function findLabelById(root, id) {
    if (!id)
        return [];
    return root.querySelectorAll(`label[for="${id}"]`);
}
function findLabelByParent(el) {
    let cur = el.parent;
    while (cur) {
        if (cur.is("label")) {
            return [cur];
        }
        cur = cur.parent;
    }
    return [];
}
